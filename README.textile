<h3>this is a simple database abstraction for php.</h3>

<p>it support mysql mysqli PDO SQLiteDatabase AND SQLite3 now, and will support more in future...</p>

<h3>how to use it ?</h3>

<p>database initialization: </p>

<pre>

require_once 'DB.php';

// pdo
$db = DB::connect('pdo', 'mysql:dbname=test;host=localhost', 'root', 'root');
$db = DB::connect('pdo', array('mysql:dbname=test;host=localhost', 'root', 'root'));
$link = new PDO('mysql:host=localhost;dbname=test', 'root', 'root');
$db = DB::connect($link);

// mysql
$db = DB::connect('mysql', 'localhost', 'root', 'root', 'test');
$db = DB::connect('mysql', array('localhost', 'root', 'root', 'test'));
$link = mysql_connect('localhost', 'root', 'root');
mysql_select_db('test', $link);
$db = DB::connect($link);

// mysqli
$db = DB::connect('mysqli', 'localhost', 'root', 'root', 'test');
$db = DB::connect('mysqli', array('localhost', 'root', 'root', 'test'));
$link = new mysqli('localhost', 'root', 'root', 'test');
$db = DB::connect($link);
$link = mysqli_init();
$link->real_connect('localhost', 'root', 'root', 'test');
$db = DB::connect($link);

// sqlite
$db = DB::connect('sqlite', 'test.sqlite');
$db = DB::connect('sqlite', array('test.sqlite'));
$link = new SQLiteDatabase('test.sqlite');
$db = DB::connect($link);
$link = sqlite_open('test.sqlite');
$db = DB::connect($link);

// sqlite3
$db = DB::connect('sqlite3', 'test.sqlite3');
$db = DB::connect('sqlite3', array('test.sqlite3'));
$link = new SQLite3('test.sqlite3');
$db = DB::connect($link);

</pre>

<p>use the $instance variable</p>

<pre>

require_once 'DB.php';

// set the DB::$instance
DB::$instance = DB::connect('mysql', 'localhost', 'root', 'root', 'test');

//in some function, u can use it like this:

test();

function test() {
    $sql = "DELETE FROM test WHERE id = ?";
    DB::$instance->exec($sql, 1);
}

</pre>

<p>how to execute sql: </p>

<pre>

// origin sql
$sql = "SELECT * FROM test_table WHERE id = '$id' AND name = '$name'";
$result = $db->getAll($sql);

// if there are variables in sql, you can do it like this, and don't need to process the variables. : )
$sql = "SELECT * FROM test_table WHERE id = ? AND name = ?";
$result = $db->getAll($sql, $id, $name);

// you can allso use:
$sql = "SELECT * FROM test_table WHERE id = ? AND name = ?";
$result = $db->getAll($sql, array($id, $name));

// it allso support:
$sql = "SELECT * FROM test_table WHERE id = :id AND name = :name";
$result = $db->getAll($sql, array('name'=>$name, 'id'=>$id));

</pre>

<p>methods: </p>

<pre>

public function getRow();
// get a row result
public function getCol();
// get a col result
public function getOne();
// get a column value
public function getAll();
// get all results
public function exec();
// execute a sql
public function lastInsertId();
// get the id of the last inserted row or sequence value
public function getDriver();
// get the origin link or object of the database driver
public function query();
// execute a sql and returns a statement object
public function fetch($query);
// fetch a result whith the statement object from query

</pre>

<p>some code may be used after initialization</p>

<pre>

//pdo

$db->getDriver()->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

//mysql

$db->exec('SET character_set_connection=utf8, character_set_results=utf8, character_set_client=binary');
$db->exec("SET sql_mode=''", $this->link);

//mysqli

$db->exec('SET character_set_connection=utf8, character_set_results=utf8, character_set_client=binary');
$db->exec("SET sql_mode=''");

</pre>